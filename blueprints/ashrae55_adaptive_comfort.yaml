blueprint:
  name: Adaptive Climate Comfort
  description: >
    Intelligent climate control implementing adaptive comfort model with energy optimization.
    
    This blueprint dynamically adjusts comfort zones based on outdoor temperature, provides 15-30% energy savings,
    and works seamlessly with SmartIR and other climate platforms.
    
  domain: automation
  author: Marco Sinhoreli
  source_url: https://github.com/msinhore/adaptive-climate-blueprint
  
  input:
    climate_entity:
      name: Climate Entity
      description: The climate device to control (SmartIR, generic thermostat, etc.)
      selector:
        entity:
          domain: climate
    
    indoor_temp_sensor:
      name: Indoor Temperature Sensor
      description: Temperature sensor, input number, number entity, or weather service for the room being controlled
      selector:
        entity:
          domain: 
            - sensor
            - input_number
            - number
            - weather
    
    outdoor_temp_sensor:
      name: Outdoor Temperature Sensor
      description: Temperature sensor, input number, number entity, or weather service for adaptive comfort calculations
      selector:
        entity:
          domain: 
            - sensor
            - input_number
            - number
            - weather
    
    occupancy_sensor:
      name: Occupancy Sensor (Optional)
      description: Motion or presence sensor for occupancy-aware control
      default: 
      selector:
        entity:
          domain: binary_sensor
          device_class: 
            - motion
            - occupancy
            - presence
    
    comfort_category:
      name: Adaptive Comfort Category
      description: >
        Comfort category based on adaptive comfort standard:
        - Category I: ±2°C (90% satisfaction) - Office environments
        - Category II: ±3°C (80% satisfaction) - Typical residential 
        - Category III: ±4°C (65% satisfaction) - Maximum energy savings
      default: "II"
      selector:
        select:
          options:
            - label: "Category I (±2°C - 90% satisfaction)"
              value: "I"
            - label: "Category II (±3°C - 80% satisfaction)"
              value: "II"
            - label: "Category III (±4°C - 65% satisfaction)"
              value: "III"
    
    energy_save_mode:
      name: Energy Save Mode
      description: Enable enhanced energy saving features
      default: true
      selector:
        boolean:
    
    natural_ventilation_enable:
      name: Natural Ventilation Detection
      description: Automatically turn off HVAC when natural ventilation is sufficient
      default: true
      selector:
        boolean:
    
    natural_ventilation_threshold:
      name: Natural Ventilation Threshold
      description: Temperature difference threshold for natural ventilation (°C)
      default: 2.0
      selector:
        number:
          min: 0.5
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"
    
    setback_temperature_offset:
      name: Setback Temperature Offset
      description: Temperature offset when room is unoccupied (°C)
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"
    
    min_comfort_temp:
      name: Minimum Comfort Temperature
      description: Absolute minimum comfort temperature (°C)
      default: 18.0
      selector:
        number:
          min: 15.0
          max: 22.0
          step: 0.5
          unit_of_measurement: "°C"
    
    max_comfort_temp:
      name: Maximum Comfort Temperature
      description: Absolute maximum comfort temperature (°C)
      default: 28.0
      selector:
        number:
          min: 25.0
          max: 32.0
          step: 0.5
          unit_of_measurement: "°C"
    
    # Advanced Comfort Parameters (Optional)
    mean_radiant_temp_sensor:
      name: Mean Radiant Temperature Sensor (Optional)
      description: Temperature sensor, input number, or number entity for mean radiant temperature measurement (near windows, heated surfaces)
      default: ""
      selector:
        entity:
          domain: 
            - sensor
            - input_number
            - number
    
    indoor_humidity_sensor:
      name: Indoor Humidity Sensor (Optional)
      description: Humidity sensor, input number, or number entity for enhanced comfort calculation
      default: ""
      selector:
        entity:
          domain: 
            - sensor
            - input_number
            - number
    
    outdoor_humidity_sensor:
      name: Outdoor Humidity Sensor (Optional)
      description: Humidity sensor, input number, number entity, or weather service for natural ventilation decisions
      default: ""
      selector:
        entity:
          domain: 
            - sensor
            - input_number
            - number
            - weather
    
    use_operative_temperature:
      name: Use Operative Temperature
      description: Enable operative temperature calculation (requires radiant temperature sensor)
      default: false
      selector:
        boolean:
    
    air_velocity:
      name: Air Velocity (m/s)
      description: Typical air velocity in the space (affects cooling sensation)
      default: 0.1
      selector:
        number:
          min: 0.0
          max: 2.0
          step: 0.1
          unit_of_measurement: "m/s"
    
    adaptive_air_velocity:
      name: Adaptive Air Velocity Control
      description: Automatically adjust fan speed based on temperature deviation
      default: true
      selector:
        boolean:
    
    humidity_comfort_enable:
      name: Humidity Comfort Correction
      description: Apply humidity-based comfort corrections
      default: true
      selector:
        boolean:
    
    comfort_precision_mode:
      name: Precision Comfort Mode
      description: Use high-precision calculations matching CBE tool accuracy
      default: false
      selector:
        boolean:
    
    # Window/Door Open Detection
    window_open_detection:
      name: Window/Door Open Detection
      description: Automatically pause HVAC when window or door is opened (detects rapid temperature changes)
      default: true
      selector:
        boolean:
    
    window_open_temp_change:
      name: Temperature Change Threshold (°C)
      description: Temperature change (increase or decrease) within detection time that indicates window/door opening
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"
    
    window_open_detection_time:
      name: Detection Time Window (minutes)
      description: Time window to detect rapid temperature changes
      default: 5
      selector:
        number:
          min: 2
          max: 15
          step: 1
          unit_of_measurement: "min"
    
    window_open_pause_duration:
      name: HVAC Pause Duration (minutes)
      description: How long to pause HVAC operation after detecting window/door opening
      default: 15
      selector:
        number:
          min: 5
          max: 60
          step: 5
          unit_of_measurement: "min"
    
    # Dual Climate Control (TRV + AC)
    dual_climate_control:
      name: Dual Climate Control
      description: Enable dual heating system control (TRV as primary, AC as secondary heating support)
      default: false
      selector:
        boolean:
    
    primary_climate_entity:
      name: Primary Climate Entity (TRV)
      description: Primary heating device (TRV, radiator valve, or main heating system)
      default: ""
      selector:
        entity:
          domain: climate
    
    secondary_heating_threshold:
      name: Secondary Heating Threshold (°C)
      description: Temperature difference below target when secondary heating (AC heat mode) activates
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"
    
    trv_priority_temp_difference:
      name: TRV Priority Temperature Threshold (°C)
      description: When outdoor temp is this much below indoor temp, prioritize TRV over AC
      default: 5.0
      selector:
        number:
          min: 2.0
          max: 10.0
          step: 0.5
          unit_of_measurement: "°C"

    # Advanced TRV Monitoring (Optional)
    trv_valve_opening_sensor:
      name: TRV Valve Opening Degree Sensor (Optional)
      description: TRV valve opening percentage for efficiency monitoring (e.g., number.radiator_sala_valve_opening_degree)
      default: ""
      selector:
        entity:
          domain: 
            - sensor
            - number

    trv_valve_closing_sensor:
      name: TRV Valve Closing Degree Sensor (Optional)
      description: TRV valve closing percentage for efficiency monitoring (e.g., number.radiator_sala_valve_closing_degree)
      default: ""
      selector:
        entity:
          domain: 
            - sensor
            - number



    trv_running_steps_sensor:
      name: TRV Running Steps Sensor (Optional)
      description: TRV motor activity indicator for performance monitoring (e.g., sensor.radiator_sala_closing_steps)
      default: ""
      selector:
        entity:
          domain: sensor

    enable_trv_efficiency_monitoring:
      name: Enable TRV Efficiency Monitoring
      description: Use TRV sensor data for advanced efficiency calculations and decision making
      default: false
      selector:
        boolean:

    # State Storage Helper (Optional but recommended for window detection)
    previous_temp_helper:
      name: Previous Temperature Helper (Optional)
      description: Input number helper to store previous temperature for window detection (e.g., input_number.adaptive_climate_prev_temp_sala). Create one in Settings > Helpers if using window detection.
      default: ""
      selector:
        entity:
          domain: input_number

variables:
  climate_entity_id: !input climate_entity
  indoor_sensor_id: !input indoor_temp_sensor
  outdoor_sensor_id: !input outdoor_temp_sensor
  occupancy_sensor_id: !input occupancy_sensor
  mean_radiant_sensor_id: !input mean_radiant_temp_sensor
  indoor_humidity_sensor_id: !input indoor_humidity_sensor
  outdoor_humidity_sensor_id: !input outdoor_humidity_sensor
  min_comfort_temp_val: !input min_comfort_temp
  max_comfort_temp_val: !input max_comfort_temp
  comfort_category_val: !input comfort_category
  energy_save_mode_val: !input energy_save_mode
  natural_ventilation_enable_val: !input natural_ventilation_enable
  natural_ventilation_threshold_val: !input natural_ventilation_threshold
  setback_temperature_offset_val: !input setback_temperature_offset
  use_operative_temperature_val: !input use_operative_temperature
  air_velocity_val: !input air_velocity
  adaptive_air_velocity_val: !input adaptive_air_velocity
  humidity_comfort_enable_val: !input humidity_comfort_enable
  comfort_precision_mode_val: !input comfort_precision_mode
  window_open_detection_val: !input window_open_detection
  window_open_temp_change_val: !input window_open_temp_change
  window_open_detection_time_val: !input window_open_detection_time
  window_open_pause_duration_val: !input window_open_pause_duration
  dual_climate_control_val: !input dual_climate_control
  primary_climate_entity_id: !input primary_climate_entity
  secondary_heating_threshold_val: !input secondary_heating_threshold
  trv_priority_temp_difference_val: !input trv_priority_temp_difference
  trv_valve_opening_sensor_id: !input trv_valve_opening_sensor
  trv_valve_closing_sensor_id: !input trv_valve_closing_sensor
  trv_running_steps_sensor_id: !input trv_running_steps_sensor
  enable_trv_efficiency_monitoring_val: !input enable_trv_efficiency_monitoring
  previous_temp_helper_id: !input previous_temp_helper
  
  comfort_tolerance: >
    {% if comfort_category_val == "I" %}
      2.0
    {% elif comfort_category_val == "II" %}
      3.0
    {% else %}
      4.0
    {% endif %}
  
  outdoor_temp: >
    {% if outdoor_sensor_id.startswith('weather.') %}
      {{ state_attr(outdoor_sensor_id, 'temperature') | float(20) }}
    {% else %}
      {{ states(outdoor_sensor_id) | float(20) }}
    {% endif %}
  indoor_air_temp: >
    {% if indoor_sensor_id.startswith('weather.') %}
      {{ state_attr(indoor_sensor_id, 'temperature') | float(20) }}
    {% else %}
      {{ states(indoor_sensor_id) | float(20) }}
    {% endif %}
  
  # Mean radiant temperature (optional)
  mean_radiant_temp: >
    {% if mean_radiant_sensor_id and mean_radiant_sensor_id != "" %}
      {{ states(mean_radiant_sensor_id) | float(indoor_air_temp) }}
    {% else %}
      {{ indoor_air_temp }}
    {% endif %}
  
  # Operative temperature calculation
  operative_temp: >
    {% if use_operative_temperature_val and mean_radiant_sensor_id and mean_radiant_sensor_id != "" %}
      {{ ((indoor_air_temp + mean_radiant_temp) / 2) | round(1) }}
    {% else %}
      {{ indoor_air_temp }}
    {% endif %}
  
  # Use operative temperature or air temperature
  indoor_temp: "{{ operative_temp }}"
  
  # Humidity readings
  indoor_humidity: >
    {% if indoor_humidity_sensor_id and indoor_humidity_sensor_id != "" %}
      {{ states(indoor_humidity_sensor_id) | float(50) }}
    {% else %}
      50
    {% endif %}
  
  outdoor_humidity: >
    {% if outdoor_humidity_sensor_id and outdoor_humidity_sensor_id != "" %}
      {% if outdoor_humidity_sensor_id.startswith('weather.') %}
        {{ state_attr(outdoor_humidity_sensor_id, 'humidity') | float(50) }}
      {% else %}
        {{ states(outdoor_humidity_sensor_id) | float(50) }}
      {% endif %}
    {% else %}
      50
    {% endif %}
  
  # Air velocity comfort correction (cooling effect) - Only above 25°C operative temp
  air_velocity_offset: >
    {% if operative_temp > 25 and air_velocity_val > 0.3 %}
      {% if air_velocity_val >= 1.2 %}
        -2.2
      {% elif air_velocity_val >= 0.9 %}
        -1.8
      {% elif air_velocity_val >= 0.6 %}
        -1.2
      {% else %}
        {{ -1.2 * ((air_velocity_val - 0.3) / 0.3) | round(1) }}
      {% endif %}
    {% else %}
      0
    {% endif %}
  
  # Humidity comfort correction
  humidity_offset: >
    {% if humidity_comfort_enable_val and indoor_humidity > 60 %}
      {{ 0.3 * ((indoor_humidity - 60) / 10) | round(1) }}
    {% elif humidity_comfort_enable_val and indoor_humidity < 30 %}
      {{ -0.2 * ((30 - indoor_humidity) / 10) | round(1) }}
    {% else %}
      0
    {% endif %}
  
  # Enhanced adaptive comfort temperature with corrections
  base_adaptive_comfort_temp: >
    {{ (18.9 + 0.255 * outdoor_temp) | round(1) }}
  
  # Adaptive comfort outdoor temperature validation (10-40°C range with extrapolation warning)
  outdoor_temp_valid: >
    {{ outdoor_temp >= 10 and outdoor_temp <= 40 }}
  
  adaptive_comfort_temp: >
    {% if outdoor_temp_valid %}
      {% if comfort_precision_mode_val %}
        {{ (base_adaptive_comfort_temp + air_velocity_offset + humidity_offset) | round(1) }}
      {% else %}
        {{ base_adaptive_comfort_temp | round(1) }}
      {% endif %}
    {% else %}
      {{ 22.0 }}
    {% endif %}
  
  comfort_temp_min: >
    {{ [adaptive_comfort_temp - comfort_tolerance, min_comfort_temp_val] | max | round(1) }}
  
  comfort_temp_max: >
    {{ [adaptive_comfort_temp + comfort_tolerance, max_comfort_temp_val] | min | round(1) }}
  
  is_occupied: >
    {% if occupancy_sensor_id and occupancy_sensor_id != "" %}
      {{ is_state(occupancy_sensor_id, 'on') }}
    {% else %}
      true
    {% endif %}
  
  # Enhanced natural ventilation with humidity consideration
  natural_ventilation_available: >
    {% if natural_ventilation_enable_val %}
      {% set temp_suitable = (outdoor_temp >= (indoor_temp - natural_ventilation_threshold_val)) and 
                             (outdoor_temp <= (indoor_temp + natural_ventilation_threshold_val)) and
                             (outdoor_temp >= comfort_temp_min) and 
                             (outdoor_temp <= comfort_temp_max) %}
      {% set humidity_suitable = true %}
      {% if outdoor_humidity_sensor_id and outdoor_humidity_sensor_id != "" %}
        {% set humidity_suitable = (outdoor_humidity <= (indoor_humidity + 10)) %}
      {% endif %}
      {{ temp_suitable and humidity_suitable }}
    {% else %}
      false
    {% endif %}
  
  # Adaptive fan speed calculation
  optimal_fan_speed: >
    {% if adaptive_air_velocity_val and indoor_temp > comfort_temp_max %}
      {% set temp_deviation = indoor_temp - comfort_temp_max %}
      {% if temp_deviation > 3 %}
        high
      {% elif temp_deviation > 1.5 %}
        medium
      {% elif temp_deviation > 0.5 %}
        low
      {% else %}
        auto
      {% endif %}
    {% else %}
      auto
    {% endif %}
  
  # Smart rounding based on outdoor vs indoor temperature relationship
  target_temp_raw: >
    {% if not is_occupied and energy_save_mode_val %}
      {% if indoor_temp > comfort_temp_max %}
        {{ comfort_temp_max }}
      {% elif indoor_temp < comfort_temp_min %}
        {{ max(comfort_temp_min - setback_temperature_offset_val, min_comfort_temp_val) }}
      {% else %}
        {{ adaptive_comfort_temp }}
      {% endif %}
    {% else %}
      {% if indoor_temp < comfort_temp_min %}
        {{ comfort_temp_min }}
      {% elif indoor_temp > comfort_temp_max %}
        {{ comfort_temp_max }}
      {% else %}
        {{ adaptive_comfort_temp }}
      {% endif %}
    {% endif %}
  
  target_temp: >
    {% set raw_temp = target_temp_raw | float %}
    {% if outdoor_temp > indoor_temp %}
      {# Outside warmer than inside - round DOWN for energy savings (less cooling) #}
      {{ raw_temp | round(0, 'floor') | int }}
    {% elif outdoor_temp < indoor_temp %}
      {# Outside cooler than inside - round UP for energy savings (less heating) #}
      {{ raw_temp | round(0, 'ceil') | int }}
    {% else %}
      {# Same temperature - standard rounding #}
      {{ raw_temp | round(0) | int }}
    {% endif %}
  
  # Current climate state checks to avoid unnecessary commands
  current_hvac_mode: >
    {{ state_attr(climate_entity_id, 'hvac_mode') | string | lower }}
  
  current_temperature: >
    {{ state_attr(climate_entity_id, 'temperature') | float(0) }}
  
  current_fan_mode: >
    {{ state_attr(climate_entity_id, 'fan_mode') | string | lower }}
  
  # Check if commands would actually change anything
  hvac_mode_needs_change: >
    {% if indoor_temp < comfort_temp_min %}
      {{ current_hvac_mode != 'heat' }}
    {% elif indoor_temp > comfort_temp_max %}
      {{ current_hvac_mode != 'cool' }}
    {% else %}
      false
    {% endif %}
  
  temperature_needs_change: >
    {{ (current_temperature - target_temp) | abs > 0.5 }}
  
  fan_mode_needs_change: >
    {% if adaptive_air_velocity_val %}
      {{ current_fan_mode != optimal_fan_speed }}
    {% else %}
      false
    {% endif %}

  # Advanced TRV Monitoring Variables
  trv_valve_opening: >
    {% if enable_trv_efficiency_monitoring_val and trv_valve_opening_sensor_id and trv_valve_opening_sensor_id != "" %}
      {{ states(trv_valve_opening_sensor_id) | float(0) }}
    {% else %}
      0
    {% endif %}

  trv_valve_closing: >
    {% if enable_trv_efficiency_monitoring_val and trv_valve_closing_sensor_id and trv_valve_closing_sensor_id != "" %}
      {{ states(trv_valve_closing_sensor_id) | float(100) }}
    {% else %}
      100
    {% endif %}

  trv_running_steps: >
    {% if enable_trv_efficiency_monitoring_val and trv_running_steps_sensor_id and trv_running_steps_sensor_id != "" %}
      {{ states(trv_running_steps_sensor_id) | float(0) }}
    {% else %}
      0
    {% endif %}

  # TRV current temperature (from climate entity current_temperature attribute)
  trv_current_temp: >
    {% if enable_trv_efficiency_monitoring_val and primary_climate_entity_id and primary_climate_entity_id != "" %}
      {{ state_attr(primary_climate_entity_id, 'current_temperature') | float(indoor_temp) }}
    {% else %}
      {{ indoor_temp }}
    {% endif %}

  # TRV HVAC action (heating, idle, etc.)
  trv_hvac_action: >
    {% if enable_trv_efficiency_monitoring_val and primary_climate_entity_id and primary_climate_entity_id != "" %}
      {{ state_attr(primary_climate_entity_id, 'hvac_action') | string | lower }}
    {% else %}
      "unknown"
    {% endif %}

  # TRV Efficiency Calculation
  trv_efficiency: >
    {% if enable_trv_efficiency_monitoring_val and trv_valve_opening > 0 %}
      {% set temp_diff = trv_current_temp - indoor_temp %}
      {% set valve_position = trv_valve_opening | float %}
      {% if valve_position > 70 and temp_diff < 1 %}
        false  # TRV working hard but not heating effectively
      {% elif valve_position > 50 and temp_diff < 0.5 %}
        false  # TRV moderately open but minimal heating
      {% elif trv_hvac_action == "heating" and temp_diff < 0.2 %}
        false  # TRV says it's heating but no temperature difference
      {% else %}
        true   # TRV appears to be working efficiently
      {% endif %}
    {% else %}
      true  # Default to efficient if no monitoring
    {% endif %}

  # Enhanced TRV Priority Decision
  use_trv_priority_enhanced: >
    {% if enable_trv_efficiency_monitoring_val and dual_climate_control_val %}
      {% set outdoor_indoor_diff = indoor_temp - outdoor_temp %}
      {% set basic_trv_priority = outdoor_indoor_diff >= trv_priority_temp_difference_val %}
      {% if trv_hvac_action == "heating" and trv_efficiency %}
        true   # TRV is heating efficiently, keep as primary
      {% elif trv_hvac_action == "idle" and (target_temp - indoor_temp) > 1 %}
        false  # TRV is idle but we need significant heating, use AC
      {% elif not trv_efficiency %}
        false  # TRV is not working efficiently, prefer AC
      {% else %}
        {{ basic_trv_priority }}  # Fall back to basic logic
      {% endif %}
    {% else %}
      {% set outdoor_indoor_diff = indoor_temp - outdoor_temp %}
      {{ outdoor_indoor_diff >= trv_priority_temp_difference_val }}
    {% endif %}
  
  # Seasonal optimization logic
  is_winter_season: >
    {{ outdoor_temp < 18 }}
  
  is_summer_season: >
    {{ outdoor_temp > 26 }}
  
  # Smart seasonal HVAC mode selection
  use_ventilation_instead_hvac: >
    {% if is_winter_season and indoor_temp > target_temp %}
      {# Winter: indoor warmer than target - use ventilation instead of cooling #}
      true
    {% elif is_summer_season and indoor_temp < target_temp %}
      {# Summer: indoor cooler than target - use ventilation instead of heating #}
      true
    {% else %}
      false
    {% endif %}
  
  # Window/Door open detection logic
  previous_indoor_temp: >
    {% if previous_temp_helper_id and previous_temp_helper_id != "" %}
      {{ states(previous_temp_helper_id) | float(indoor_temp) }}
    {% else %}
      {# Fallback: use current temp (no detection on first run) #}
      {{ indoor_temp }}
    {% endif %}
  
  temp_change_rate: >
    {{ (previous_indoor_temp - indoor_temp) | abs }}
  
  # Detect rapid temperature change (window/door opening)
  window_door_open_detected: >
    {% if window_open_detection_val and previous_temp_helper_id and previous_temp_helper_id != "" %}
      {% set temp_change = (previous_indoor_temp - indoor_temp) | abs %}
      {% set temp_diff_exists = previous_indoor_temp != indoor_temp %}
      {% set meaningful_change = temp_change >= window_open_temp_change_val %}
      {% set temp_drop = previous_indoor_temp - indoor_temp %}
      {% set temp_rise = indoor_temp - previous_indoor_temp %}
      
      {# Debug values for troubleshooting #}
      {% set debug_info = "Previous: " + previous_indoor_temp|string + "°C, Current: " + indoor_temp|string + "°C, Change: " + temp_change|string + "°C, Threshold: " + window_open_temp_change_val|string + "°C" %}
      
      {% if meaningful_change and temp_diff_exists %}
        {# Detect both drops (winter) and rises (summer) #}
        {% if temp_drop >= window_open_temp_change_val %}
          {# Temperature drop detected - cold air entering (winter scenario) #}
          true
        {% elif temp_rise >= window_open_temp_change_val %}
          {# Temperature rise detected - warm air entering (summer scenario) #}
          true
        {% else %}
          false
        {% endif %}
      {% else %}
        false
      {% endif %}
    {% else %}
      false
    {% endif %}
  
  # Calculate when to resume HVAC after window/door detection
  window_open_pause_until: >
    {% if window_door_open_detected %}
      {{ (now().timestamp() + (window_open_pause_duration_val * 60)) | timestamp_custom('%Y-%m-%d %H:%M:%S') }}
    {% else %}
      ""
    {% endif %}
  
  # Adaptive comfort compliance notes
  compliance_notes: >
    {% set notes = [] %}
    {% if outdoor_temp < 10 or outdoor_temp > 40 %}
      {% set notes = notes + ["Outdoor temp outside valid range (10-40°C): " + outdoor_temp|string + "°C"] %}
    {% elif outdoor_temp > 33.5 %}
      {% set notes = notes + ["Outdoor temp above standard range (10-33.5°C): " + outdoor_temp|string + "°C - using extrapolation"] %}
    {% endif %}
    {% if operative_temp <= 25 and air_velocity_val > 0.3 %}
      {% set notes = notes + ["Air velocity cooling only applies above 25°C operative temp"] %}
    {% endif %}
    {% if use_ventilation_instead_hvac %}
      {% set notes = notes + ["Seasonal optimization: using ventilation instead of " + ("cooling" if is_winter_season else "heating")] %}
    {% endif %}
    {% if window_door_open_detected %}
      {% set notes = notes + ["Window/door open detected - HVAC paused for " + window_open_pause_duration_val|string + " minutes"] %}
    {% endif %}
    {% if notes|length > 0 %}
      {{ notes | join("; ") }}
    {% else %}
      "Compliant"
    {% endif %}

trigger:
  - platform: time_pattern
    minutes: 0
  - platform: time_pattern
    minutes: 10
  - platform: time_pattern
    minutes: 20
  - platform: time_pattern
    minutes: 30
  - platform: time_pattern
    minutes: 40
  - platform: time_pattern
    minutes: 50
  
  - platform: state
    entity_id: !input indoor_temp_sensor
  
  - platform: state
    entity_id: !input outdoor_temp_sensor

condition:
  - condition: template
    value_template: >
      {{ states(climate_entity_id) not in ['unavailable', 'unknown'] and
         states(indoor_sensor_id) not in ['unavailable', 'unknown'] and
         states(outdoor_sensor_id) not in ['unavailable', 'unknown'] }}

action:
    - choose:
        # Window/Door open detection - pausa HVAC, mas só atualiza helper se threshold for excedido
        - conditions:
            - condition: template
              value_template: "{{ window_door_open_detected }}"
          sequence:
            - service: climate.turn_off
              target:
                entity_id: !input climate_entity
            - condition: template
              value_template: "{{ dual_climate_control_val and primary_climate_entity_id != '' }}"
            - service: climate.turn_off
              target:
                entity_id: "{{ primary_climate_entity_id }}"
            - service: logbook.log
              data:
                name: "Adaptive Climate Control"
                message: >
                  Window/door open detected! HVAC paused for {{ window_open_pause_duration_val }} minutes.
                  Temperature change: {{ ((previous_indoor_temp - indoor_temp) | abs) | round(1) }}°C.
                  Indoor: {{ indoor_temp }}°C (was {{ previous_indoor_temp }}°C), Outdoor: {{ outdoor_temp }}°C.
                  Resume time: {{ window_open_pause_until }}
            # Atualiza helper SOMENTE após detecção real
            - condition: template
              value_template: "{{ previous_temp_helper_id and previous_temp_helper_id != '' }}"
            - service: input_number.set_value
              target:
                entity_id: "{{ previous_temp_helper_id }}"
              data:
                value: "{{ indoor_temp }}"

        # Normal climate control (ASHRAE 55, ventilação, ocupação, etc.)
        - conditions: []
          sequence:
            # Heating needed - indoor temp below comfort zone
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ indoor_temp < comfort_temp_min }}"
                  sequence:
                    - choose:
                        - conditions:
                            - condition: template
                              value_template: "{{ is_summer_season and indoor_temp < target_temp }}"
                          sequence:
                            - service: climate.set_hvac_mode
                              target:
                                entity_id: !input climate_entity
                              data:
                                hvac_mode: fan_only
                            - service: climate.set_fan_mode
                              target:
                                entity_id: !input climate_entity
                              data:
                                fan_mode: "low"
                        - conditions:
                            - condition: template
                              value_template: "{{ dual_climate_control_val and primary_climate_entity_id != '' }}"
                          sequence:
                            # ...lógica dual climate control...
                        - conditions: []
                          sequence:
                            - service: climate.set_hvac_mode
                              target:
                                entity_id: !input climate_entity
                              data:
                                hvac_mode: heat
                            - condition: template
                              value_template: "{{ temperature_needs_change }}"
                            - service: climate.set_temperature
                              target:
                                entity_id: !input climate_entity
                              data:
                                temperature: "{{ target_temp }}"
                            - condition: template
                              value_template: "{{ adaptive_air_velocity_val and fan_mode_needs_change }}"
                            - service: climate.set_fan_mode
                              target:
                                entity_id: !input climate_entity
                              data:
                                fan_mode: "low"
                # Cooling needed - indoor temp above comfort zone
                - conditions:
                    - condition: template
                      value_template: "{{ indoor_temp > comfort_temp_max }}"
                  sequence:
                    # ...lógica de resfriamento, ventilação natural, etc...
                # Dentro da zona de conforto
                - conditions:
                    - condition: template
                      value_template: "{{ indoor_temp >= comfort_temp_min and indoor_temp <= comfort_temp_max }}"
                  sequence:
                    # ...lógica de ventilação adaptativa, auto, etc...
            # Atualiza helper SEMPRE ao final, se não houve detecção de janela
            - condition: template
              value_template: "{{ previous_temp_helper_id and previous_temp_helper_id != '' }}"
            - service: input_number.set_value
              target:
                entity_id: "{{ previous_temp_helper_id }}"
              data:
                value: "{{ indoor_temp }}"
            - service: logbook.log
              data:
                name: "Adaptive Climate - State Update"
                message: >
                  Updated previous temperature helper: {{ previous_temp_helper_id }} = {{ indoor_temp }}°C
                  (was {{ previous_indoor_temp }}°C, change: {{ temp_change_rate }}°C)
                  Window detection: {{ 'ON' if window_open_detection_val else 'OFF' }}
                  {% if window_open_detection_val %}(threshold: {{ window_open_temp_change_val }}°C){% endif %}
